{
  "name": "chat-input",
  "type": "registry:ui",
  "code": "\"use client\";\n\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { SendIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface ChatInputProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface ChatInputFieldProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSubmit?: () => void;\n  isLoading?: boolean;\n  className?: string;\n}\n\ninterface ChatInputActionsProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst ChatInput = React.forwardRef<HTMLDivElement, ChatInputProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"group relative flex h-full w-full max-w-full flex-1 items-center cursor-text rounded-3xl border p-1 sm:p-1.5 shadow-[0_9px_9px_0px_rgba(0,0,0,0.01),_0_2px_5px_0px_rgba(0,0,0,0.06)] transition-colors dark:border-none dark:shadow-none dark:bg-[#303030]\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nChatInput.displayName = \"ChatInput\";\n\nconst ChatInputField = React.forwardRef<HTMLInputElement, ChatInputFieldProps>(\n  ({ value, onChange, onSubmit, isLoading, className, ...props }, ref) => {\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\" && !e.shiftKey && onSubmit && value && !isLoading) {\n        e.preventDefault();\n        onSubmit();\n      }\n    };\n\n    return (\n      <Input\n        ref={ref}\n        value={value}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          onChange(e.target.value)\n        }\n        onKeyDown={handleKeyDown}\n        placeholder=\"Your Article Title...\"\n        className={cn(\n          \"w-full ml-1 border-0 bg-transparent p-1 sm:p-2 focus-visible:ring-0 shadow-none outline-none\",\n          className\n        )}\n        style={{\n          WebkitBoxShadow: \"none\",\n          MozBoxShadow: \"none\",\n          boxShadow: \"none\",\n        }}\n        {...props}\n      />\n    );\n  }\n);\nChatInputField.displayName = \"ChatInputField\";\n\nconst ChatInputActions = React.forwardRef<\n  HTMLDivElement,\n  ChatInputActionsProps\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n      {children}\n    </div>\n  );\n});\nChatInputActions.displayName = \"ChatInputActions\";\n\nexport {\n  ChatInput,\n  ChatInputActions,\n  ChatInputField,\n  type ChatInputActionsProps,\n  type ChatInputFieldProps,\n  type ChatInputProps,\n};",
  "files": [
    {
      "path": "components/prismui/chat-input.tsx",
      "type": "registry:ui",
      "content": "import { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { cn } from \"@/lib/utils\";\nimport { SendIcon } from \"lucide-react\";\nimport * as React from \"react\";\n\ninterface ChatInputProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\ninterface ChatInputFieldProps {\n  value: string;\n  onChange: (value: string) => void;\n  onSubmit?: () => void;\n  isLoading?: boolean;\n  className?: string;\n}\n\ninterface ChatInputActionsProps {\n  className?: string;\n  children?: React.ReactNode;\n}\n\nconst ChatInput = React.forwardRef<HTMLDivElement, ChatInputProps>(\n  ({ className, children, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"group relative flex h-full w-full max-w-full flex-1 items-center cursor-text rounded-3xl border p-1 sm:p-1.5 shadow-[0_9px_9px_0px_rgba(0,0,0,0.01),_0_2px_5px_0px_rgba(0,0,0,0.06)] transition-colors dark:border-none dark:shadow-none dark:bg-[#303030]\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    );\n  }\n);\nChatInput.displayName = \"ChatInput\";\n\nconst ChatInputField = React.forwardRef<HTMLInputElement, ChatInputFieldProps>(\n  ({ value, onChange, onSubmit, isLoading, className, ...props }, ref) => {\n    const handleKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {\n      if (e.key === \"Enter\" && !e.shiftKey && onSubmit && value && !isLoading) {\n        e.preventDefault();\n        onSubmit();\n      }\n    };\n\n    return (\n      <Input\n        ref={ref}\n        value={value}\n        onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\n          onChange(e.target.value)\n        }\n        onKeyDown={handleKeyDown}\n        placeholder=\"Your Article Title...\"\n        className={cn(\n          \"w-full ml-1 border-0 bg-transparent p-1 sm:p-2 focus-visible:ring-0 shadow-none outline-none\",\n          className\n        )}\n        style={{\n          WebkitBoxShadow: \"none\",\n          MozBoxShadow: \"none\",\n          boxShadow: \"none\",\n        }}\n        {...props}\n      />\n    );\n  }\n);\nChatInputField.displayName = \"ChatInputField\";\n\nconst ChatInputActions = React.forwardRef<\n  HTMLDivElement,\n  ChatInputActionsProps\n>(({ className, children, ...props }, ref) => {\n  return (\n    <div ref={ref} className={cn(\"flex items-center\", className)} {...props}>\n      {children}\n    </div>\n  );\n});\nChatInputActions.displayName = \"ChatInputActions\";\n\n\nexport {\n  ChatInput,\n  ChatInputActions,\n  ChatInputField,\n  type ChatInputActionsProps,\n  type ChatInputFieldProps,\n  type ChatInputProps,\n};\n"
    }
  ],
  "dependencies": [
    "lucide-react",
    "@/components/ui/button",
    "@/components/ui/input"
  ]
}